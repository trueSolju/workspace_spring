<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 해당 파일에 모든 쿼리문을 작성 -->
<mapper namespace="buyMapper">
    <resultMap id="buy" type="com.green.shop.buy.vo.BuyVO">
        <id column="BUY_CODE" property="buyCode"/>
        <result column="MEMBER_ID" property="memberId"/>
        <result column="BUY_PRICE" property="buyPrice"/>
        <result column="BUY_DATE" property="buyDate"/>
        <collection property="buyDetailList" resultMap="buyDetail"/>
    </resultMap>
    <resultMap id="buyDetail" type="com.green.shop.buy.vo.BuyDetailVO">
        <id column="BUY_DETAIL_CODE" property="buyDetailCode"/>
        <result column="ITEM_CODE" property="itemCode"/>
        <result column="BUY_CNT" property="buyCnt"/>
        <result column="TOTAL_PRICE" property="totalPrice"/>
        <result column="BUY_CODE" property="buyCode"/>
        <association property="itemVO" resultMap="itemMapper.itemMap"/>
    </resultMap>

<!--    다음에 들어갈 buyCode 조회-->
    <select id="selectNextBuyCode" resultType="int">
    SELECT IFNULL(MAX(BUY_CODE),0)+1 FROM shop_buy;
    </select>
<!--    shop_buy 테이블에 insert-->
    <insert id="insertBuy">
        INSERT INTO SHOP_BUY(
            BUY_CODE
            , MEMBER_ID
            , BUY_PRICE
        )VALUES(
            #{buyCode}
            , #{memberId}
            , #{buyPrice}
        )
    </insert>
<!--    구매상세 정보INSERT-->
    <insert id="insertBuyDetails">
        INSERT INTO BUY_DETAIL(
           ITEM_CODE
            , BUY_CNT
            , TOTAL_PRICE
            , BUY_CODE
        )VALUES
        <foreach collection="buyDetailList" item="buyDetail" separator=",">
        (   #{buyDetail.itemCode}
            , #{buyDetail.buyCnt}
            , #{buyDetail.totalPrice}
            , #{buyCode}
        )

        </foreach>
    </insert>
    <insert id="insertDetail">
        INSERT INTO BUY_DETAIL(
            ITEM_CODE
            , BUY_CNT
            , TOTAL_PRICE
            , BUY_CODE
        )VALUES(
            #{itemCode}
            , #{buyCnt}
            , #{totalPrice}
            , #{buyCode}
        )
    </insert>
<!--    구매 목록 조회(사용자용)-->
    <select id="selectBuyList" resultMap="buy">
        SELECT
        D.BUY_CODE
        , BUY_CNT
        , TOTAL_PRICE
        , D.ITEM_CODE
        , ATTACHED_FILE_NAME
        , ITEM_NAME
        , BUY_DATE
        , BUY_PRICE
        FROM buy_detail D INNER JOIN item_image I
        ON D.ITEM_CODE = I.ITEM_CODE
        INNER JOIN shop_item S
        ON I.ITEM_CODE=S.ITEM_CODE
        INNER JOIN shop_buy B
        ON D.BUY_CODE = B.BUY_CODE
        WHERE IS_MAIN="Y"
        AND MEMBER_ID=#{memberId}
        ORDER BY BUY_DATE DESC
    </select>
<!--    구매 목록 조회-->
<!--    작다 < : &lt; (less than)  -->
<!--    크다 > : &gt; (great than)  -->
    <select id="selectBuy" resultMap="buy">
        SELECT BUY_CODE
        , MEMBER_ID
        , BUY_PRICE
        , BUY_DATE
        FROM SHOP_BUY
        WHERE 1=1
        <if test='searchValue!=null and !searchValue.equals("")'>
            AND ${searchType} LIKE CONCAT('%',#{searchValue},'%')
        </if>
        <if test='fromDate != null and !fromDate.equals("")'>
            AND DATE_FORMAT(BUY_DATE,'%Y-%m-%d') &gt;= #{fromDate}
        </if>
        <if test='toDate !=null and !toDate.equals("")'>
            AND DATE_FORMAT(BUY_DATE,'%Y-%m-%d') &lt;= #{toDate}
        </if>
        ORDER BY BUY_DATE DESC;
    </select>




<!--    구매 목록 조회  상세목록 조회-->
    <select id="adminBuy" resultMap="buy">
        SELECT
        B.BUY_CODE
        , BUY_CNT
        , TOTAL_PRICE
        , ATTACHED_FILE_NAME
        , ITEM_NAME
        , BUY_DATE
        , BUY_PRICE
        , B.MEMBER_ID
        FROM buy_detail D
        INNER JOIN item_image I
        ON D.ITEM_CODE = I.ITEM_CODE
        INNER JOIN shop_item S
        ON I.ITEM_CODE=S.ITEM_CODE
        INNER JOIN shop_buy B
        ON D.BUY_CODE = B.BUY_CODE
        WHERE IS_MAIN="Y"
        AND B.Buy_Code = #{buyCode}

    </select>
</mapper>































